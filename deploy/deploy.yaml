apiVersion: apps/v1
kind: Deployment
metadata:
  name: job-deployment
  namespace: job-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: job
  template:
    metadata:
      labels:
        app: job
    spec:
      containers:
      - name: job
        image: yeongchan321/emp_job:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: 300Mi
            cpu: "300m"
          limits:
            memory: 500Mi
            cpu: "500m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: member-deployment
  namespace: member-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: member
  template:
    metadata:
      labels:
        app: member
    spec:
      containers:
      - name: member
        image: yeongchan321/emp_member:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: 300Mi
            cpu: "300m"
          limits:
            memory: 500Mi
            cpu: "500m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apply-deployment
  namespace: apply-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: apply
  template:
    metadata:
      labels:
        app: apply
    spec:
      containers:
      - name: apply
        image: yeongchan321/emp_apply:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: 300Mi
            cpu: "300m"
          limits:
            memory: 500Mi
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: job-svc
  namespace: job-ns
spec:
  selector:
    app: job
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: member-svc
  namespace: member-ns
spec:
  selector:
    app: member
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: apply-svc
  namespace: apply-ns
spec:
  selector:
    app: apply
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: db
  namespace: db-ns
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      run: db
  strategy: {}
  template:
    metadata:
      labels:
        run: db
    spec:
      containers:
      - image: mongo:4.2
        name: mongodb
        args: ["--dbpath","/data/db"]
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-creds
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-creds
              key: password
        volumeMounts:
        - name: "mongo-data-dir"
          mountPath: "/data/db"
        resources:
          requests:
            memory: 300Mi
            cpu: "300m"
          limits:
            memory: 1Gi
            cpu: "1000m"
      volumes:
      - name: "mongo-data-dir"
        persistentVolumeClaim:
          claimName: "mongo-data"
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-svc
  namespace: db-ns
  labels:
    run: db
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    run: db
---
apiVersion: v1
kind: Service
metadata:
  name: headless-to-job
  namespace: ingress-nginx
spec:
  type: ExternalName
  externalName: job-svc.job-ns.svc.cluster.local
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: headless-to-member
  namespace: ingress-nginx
spec:
  type: ExternalName
  externalName: member-svc.member-ns.svc.cluster.local
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: headless-to-apply
  namespace: ingress-nginx
spec:
  type: ExternalName
  externalName: apply-svc.apply-ns.svc.cluster.local
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  namespace: ingress-nginx
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /api/job(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: headless-to-job
            port:
              number: 80
      - path: /api/member(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: headless-to-member
            port:
              number: 80
      - path: /api/apply(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: headless-to-apply
            port:
              number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: frontend-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: codingalice/frontend-pod:3.0
        env:
        - name: API_URL
          value: "http://ingress-nginx-controller.ingress-nginx.svc.cluster.local"
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: 300Mi
            cpu: "300m"
          limits:
            memory: 1Gi
            cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: frontend-ns
spec:
  selector:
    app: frontend
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
  namespace: frontend-ns
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  defaultBackend:
    service:
      name: frontend-service
      port:
        number: 80
  tls:
  - hosts:
    - frontend.kakao.io
    secretName: k8s-secret
  rules:
  - host: frontend.kakao.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80

